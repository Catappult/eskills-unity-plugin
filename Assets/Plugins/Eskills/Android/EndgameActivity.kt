package com.appcoins.eskills_endgame

import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.util.Log
import androidx.activity.result.ActivityResult
import androidx.activity.result.ActivityResultLauncher
import android.app.Activity
import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
import androidx.appcompat.app.AppCompatActivity

class EndgameActivity : AppCompatActivity() {
    // activity result launcher
    private lateinit var mLauncher: ActivityResultLauncher<Intent>
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val session = intent.getStringExtra(SESSION_KEY)
        createLauncher()
        launchEskillsEndgameFlow(session)
    }

    private fun createLauncher() {
        mLauncher = registerForActivityResult(StartActivityForResult()) { result: ActivityResult ->
        when (result.resultCode) {
            RESULT_OK -> {
                launchInitialActivity()
                }
            RESULT_RESTART -> {
                // TODO - start purchase flow for same game mode
            }
            RESULT_SERVICE_UNAVAILABLE -> {}
            RESULT_ERROR -> {}
            RESULT_INVALID_URL -> {}
            else -> launchInitialActivity()
        }
        }
    }

    private fun launchInitialActivity() {
        // TODO - go back to initial activity/main menu
        finish()
    }

    private fun launchEskillsEndgameFlow(session: String?) {
        Log.d(TAG, "endgame session token : $session")
        val url = ("https://apichain.catappult.io"
            + "/transaction/eskills/endgame?"
            + "session="
            + session
            + "&domain="
            + applicationContext.packageName)
        val intent = buildTargetIntent(url)
        try {
            mLauncher.launch(intent)
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    /**
    * This method generates the intent with the provided One Step URL to target the
    * AppCoins Wallet.
    *
    * @param url The url that generated by following the One Step payment rules
    *
    * @return The intent used to call the wallet
    */
    private fun buildTargetIntent(url: String): Intent {
        val intent = Intent(Intent.ACTION_VIEW)
        intent.data = Uri.parse(url)
        // Check if there is an application that can process the AppCoins Billing
        // flow
        val packageManager = applicationContext.packageManager
        val appsList = packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY)
        for (app in appsList) {
            if (app.activityInfo.packageName == "cm.aptoide.pt") {
                // If there's aptoide installed always choose Aptoide as default to open url
                intent.setPackage(app.activityInfo.packageName)
                break
            } else if (app.activityInfo.packageName == "com.appcoins.wallet") {
                // If Aptoide is not installed and wallet is installed then choose Wallet
                // as default to open url
                intent.setPackage(app.activityInfo.packageName)
            }
        }
        return intent
    }

    companion object {
            //result codes for endgame activity
            private const val RESULT_OK = 0
            private const val RESULT_RESTART = 1
            private const val RESULT_SERVICE_UNAVAILABLE = 2
            private const val RESULT_ERROR = 3
            private const val RESULT_INVALID_URL = 4
            //keys
            private const val SESSION_KEY = "SESSION"

            private val TAG = EndgameActivity::class.java.simpleName

            public @JvmStatic 
            fun start(context: Activity, session: String){
                Log.d(TAG, "start: $context")
                val intent = Intent(context, EndgameActivity::class.java)
                intent.putExtra(SESSION_KEY, session)
                context.startActivity(intent)
            }
    }
}